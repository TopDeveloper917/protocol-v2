use std::str::FromStr;
use solana_program::pubkey::Pubkey;

use crate::create_account_info;
use crate::state::oracle::{get_oracle_price, OracleSource};
use crate::state::perp_market::AMM;
use crate::test_utils::*;

#[test]
fn pyth_1k() {
    let mut oracle_price = get_hardcoded_pyth_price(8394, 10);
    let oracle_price_key =
        Pubkey::from_str("8ihFLu5FimgTQ1Unh4dVyEHUGodJ5gJQCrQf4KUVB9bN").unwrap();
    let pyth_program = crate::ids::pyth_program::id();
    create_account_info!(
        oracle_price,
        &oracle_price_key,
        &pyth_program,
        oracle_account_info
    );

    let oracle_price_data =
        get_oracle_price(&OracleSource::Pyth1K, &oracle_account_info, 0).unwrap();
    assert_eq!(oracle_price_data.price, 839);

    let amm = AMM {
        oracle_source: OracleSource::Pyth1K,
        ..AMM::default()
    };

    let twap = amm.get_oracle_twap(&oracle_account_info, 0).unwrap();
    assert_eq!(twap, Some(839));
}

#[test]
fn pyth_1m() {
    let mut oracle_price = get_hardcoded_pyth_price(8394, 10);
    let oracle_price_key =
        Pubkey::from_str("8ihFLu5FimgTQ1Unh4dVyEHUGodJ5gJQCrQf4KUVB9bN").unwrap();
    let pyth_program = crate::ids::pyth_program::id();
    create_account_info!(
        oracle_price,
        &oracle_price_key,
        &pyth_program,
        oracle_account_info
    );

    let oracle_price_data =
        get_oracle_price(&OracleSource::Pyth1M, &oracle_account_info, 0).unwrap();
    assert_eq!(oracle_price_data.price, 839400);

    let amm = AMM {
        oracle_source: OracleSource::Pyth1M,
        ..AMM::default()
    };

    let twap = amm.get_oracle_twap(&oracle_account_info, 0).unwrap();
    assert_eq!(twap, Some(839400));
}

#[test]
fn pyth_pull_1m () {
    let oracle_price_key =
        Pubkey::from_str("DBE3N8uNjhKPRHfANdwGvCZghWXyLPdqdSbEW2XFwBiX").unwrap();
    let oracle_market_str = String::from("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
    let mut decoded_bytes = base64::decode(oracle_market_str).unwrap();
    let oracle_market_bytes = decoded_bytes.as_mut_slice();
    let mut lamports = 0;
    let pyth_program = crate::ids::pyth_pull_program::id();
    let bonk_market_account_info =
        create_account_info(&oracle_price_key, true, &mut lamports, oracle_market_bytes, &pyth_program);

    let oracle_price_data =
        get_oracle_price(&OracleSource::Pyth1MPull, &bonk_market_account_info, 234919073).unwrap();
    assert_eq!(oracle_price_data.price, 839400);

    let amm = AMM {
        oracle_source: OracleSource::Pyth1MPull,
        ..AMM::default()
    };

    let twap = amm.get_oracle_twap(&bonk_market_account_info, 0).unwrap();
    assert_eq!(twap, Some(839400));
}